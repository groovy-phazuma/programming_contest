〇 ベクトルの定義
vector<型名> 変数名(要素数,値)
vector<vector<型名>> 変数名(要素数,値)　e.g. vector<vector<int>> v(h,vector<int>(w));

〇 二次元配列への入力
for(int i=0; i<h; i++){
        for(int j=0; j<w; j++){
            cin >> v.at(i).at(j)
        }
    }
v[i][j]でもv.at(i).at(j)でも同じ。前者はエラーメッセージが出力できないので、初学者は後者が推奨。
範囲外アクセスは「未定義動作」を引き起こす。その点でもat()を用いるメリットがある。

〇 if文
(条件式) ? (該当する場合の処理) : (該当しない場合の処理)
e.g.
v[i][0] == 1 ? accum1[i] += v[i][1] : accum2[i] += v[i][1];

〇 文字列の格納
string s[n]; // s(n)ではエラーが生じる

〇 順序付き集合（pythonのリスト的な）
set<string> namelist;
namelist.count() // count
namelist.insert() // add
namelist.find() // 要素のイテレータ取得。存在しない場合はnamelist.find()==namelist.end()が返る
namelist.erase() // remove
set の中には、要素がソートされて格納されるので、set に要素を入れるだけで、実質的にソートが完了している事になる。
ソートのためにこの方法を使うのは、vector にデータを入れて algorithm の sort() を使う直接的な方法と比較して、相当に動作が遅い。

〇 deque
deque<int> dq;
dq[i] で i 番目（0オリジン）の要素を参照可能。

〇 型変換
stringの9とintの9は対応しない。
string 9 - '0' = int 9　といったイメージ