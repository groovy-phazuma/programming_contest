〇 ベクトルの定義
vector<型名> 変数名(要素数,値)
vector<vector<型名>> 変数名(要素数,値)　e.g. vector<vector<int>> v(h,vector<int>(w));
ソートする：sort(vec.begin(), vec.end());

〇 二次元配列への入力
for(int i=0; i<h; i++){
        for(int j=0; j<w; j++){
            cin >> v.at(i).at(j)
        }
    }
v[i][j]でもv.at(i).at(j)でも同じ。前者はエラーメッセージが出力できないので、初学者は後者が推奨。
範囲外アクセスは「未定義動作」を引き起こす。その点でもat()を用いるメリットがある。

〇 if文
(条件式) ? (該当する場合の処理) : (該当しない場合の処理)
e.g.
v[i][0] == 1 ? accum1[i] += v[i][1] : accum2[i] += v[i][1];

〇 文字列の格納
string s[n]; // s(n)ではエラーが生じる

〇 順序付き集合（pythonのリスト的な）
set<string> namelist;
namelist.count() // count
namelist.insert() // add
namelist.find() // 要素のイテレータ取得。存在しない場合はnamelist.find()==namelist.end()が返る
namelist.erase() // remove
set の中には、要素がソートされて格納されるので、set に要素を入れるだけで、実質的にソートが完了している事になる。
ソートのためにこの方法を使うのは、vector にデータを入れて algorithm の sort() を使う直接的な方法と比較して、相当に動作が遅い。

〇 deque
deque<int> dq;
dq[i] で i 番目（0オリジン）の要素を参照可能。

〇 型変換
stringの9とintの9は対応しない。
string 9 - '0' = int 9　といったイメージ

〇 bool演算子の活用
1<<kで2**kを意味する。
この辺りが参考になる。（https://drken1215.hatenablog.com/entry/2019/12/14/171657）
if (!(bit & (1<<i))){ // ビットSにi番目のフラグが立っていない
if ((bit & (1<<i))){ // ビットSにi番目のフラグが立っている

〇 autoの活用
右辺から型を推論する（auto x = 1）
auto& はほぼ万能型


for (auto c: S) {
    if (c == '(') ++score;
    else if (c == ')') --score;
}
のように、stringの各要素にアクセスできるのは便利。

〇 lower_bound()による最も近い値の取得
lower_bound(v.begin(), v.end(), a);
探索したい値以上が現れる最初の位置のイテレータを取得。
int index = it - v.begin();

〇 atan2(x,y)による角度の求め方
算術型の逆正接（アークタンジェント）を対辺と隣辺から求める。

〇 小数点の桁数の指定
誤差の範囲の指定がある場合は、正しく出力できているかを以下のようにして確かめる。
cout << setprecision(10) << ans << endl;

〇 連番の数字で配列を初期化
iota(v.begin(),v.end(), 1);が便利
1 2 3 ... N
